{"data":{"post":{"html":"<h2>Babel, PostCSSで静的サイトを作るためのwebpackの基本構成</h2>\n<p>webpackの利点はなんでもrequireできる点な気がしているので、静的サイトを生成するために使うのはどうかなと思うけど、別途gulp等を使うのも癪なのでwebpackで完結するように構成した。loaderもすでに揃っているので無理はない。</p>\n<h3>機能</h3>\n<ul>\n<li>jsをBabelでコンパイル</li>\n<li>cssをPostCSSでコンパイル（プラグインはお好みで）</li>\n<li>font-awesomeを利用</li>\n<li>画像リソースをオプティマイズ</li>\n<li>htmlをコピー（本当はjadeでテンプレート機能使いたかったけどうまく動かず断念）</li>\n</ul>\n<h3>ディレクトリ構造</h3>\n<pre><code>.babelrc\ndist\n  |__base.css\n  |__bundle.js\n  |__fonts/...\n  |__images/...\n  |__index.html\nsrc\n  |__index.html\n  |__index.js\n  |__images/...\n  |__styles\n      |__base.css\npackage.json\nwebpack.config.js\n</code></pre>\n<h3>webpack.config.js</h3>\n<pre><code class=\"language-js\">var glob = require('glob');\nvar cssnext = require('postcss-cssnext');\nvar conditionals = require('postcss-conditionals');\nvar discardComments = require('postcss-discard-comments');\nvar fontAwesome = require('postcss-font-awesome');\nvar atImport = require('postcss-import');\nvar atMixins = require('postcss-mixins');\n\nmodule.exports = {\n  context: `${__dirname}/src`,\n  entry: {\n    css: './styles/base.css',\n    fonts: glob.sync('node_modules/font-awesome/fonts/**/*.*').map(f => f.replace('node_modules/', '')),\n    html: './index.html',\n    images: glob.sync('./src/images/**/*.*').map(f => f.replace('./src', '.')),\n    javascript: './index.js'\n  },\n  module: {\n    loaders: [{\n      exclude: /node_modules/,\n      loader: 'babel',\n      test: /\\.js$/\n    }, {\n      loader: 'file?name=[name].[ext]',\n      test: /\\.html$/\n    }, {\n      loader: 'file?name=[name].[ext]!postcss',\n      test: /\\.css$/\n    }, {\n      loader: 'file?name=[path][name].[ext]!img?minimize&#x26;optimizationLevel=5&#x26;progressive=true',\n      test: /images\\/(.*\\/)?.*\\.(gif|png|jpg|svg)$/\n    }, {\n      loader: 'file?name=fonts/[name].[ext]',\n      test: /fonts\\/.*\\.(eot|otf|ttf|woff|woff2|svg)$/\n    }]\n  },\n  output: {\n    filename: 'bundle.js',\n    path: `${__dirname}/dist`\n  },\n  postcss: () => [atImport, atMixins, conditionals, cssnext, discardComments, fontAwesome]\n};\n</code></pre>\n<h4>context</h4>\n<pre><code>context: `${__dirname}/src`,\n</code></pre>\n<p>contextを指定すると、srcを除いたpathでoutputできる。\nもしcontextを指定しなかった場合は <code>dist/src/index.html</code> といった形で書き出されてしまう。</p>\n<h4>entry</h4>\n<p>outputするファイルを指定する。<br>\nディレクトリを指定できないのでファイルを直接指定する必要があるが、リストで渡すことは可能なのでglobでなんとかいける。ただし、pathの指定方法に注意する必要があり、<a href=\"https://webpack.github.io/docs/resolving.html\">この辺り</a>に詳しく書かれている。</p>\n<blockquote>\n<p>absolute path: require(\"/home/me/file\") require(\"C:\\Home\\me\\file\")<br>\nrelative path: require(\"../src/file\") require(\"./file\")<br>\nmodule path: require(\"module\") require(\"module/lib/file\")</p>\n</blockquote>\n<p>このpath周りが結構ややこしい</p>\n<h4>module</h4>\n<p>loaderを定義する。js以外は、なんらかのloaderでコンパイルしたのちfile-loaderで書き出す流れになる。<br>\n正確に理解していないが、loaderの定義方法にはいくつかあって、文字列で <code>!</code> 区切りで指定した場合は同期的に実行されるっぽい。リストでloaderを指定した場合には非同期な気がする（検証してない）。</p>\n<pre><code class=\"language-js\">test: /images\\/(.*\\/)?.*\\.(gif|png|jpg|svg)$/\n\ntest: /fonts\\/.*\\.(eot|otf|ttf|woff|woff2|svg)$/\n</code></pre>\n<p>textには該当のloaderを実行するファイルを指定する。<code>images/*.svg</code> と <code>fonts/*.svg</code> のように拡張子が被る場合があるのでディレクトリなどを含めて限定している。</p>\n<h4>loader</h4>\n<p>loaderはwebpackのプラグインで、コンパイラみたいなやつ。今回使っているのは以下。</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/babel/babel-loader\">babel-loader</a></p>\n<ul>\n<li>babelを使ってjsを変換</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://github.com/webpack/file-loader\">file-loader</a></p>\n<ul>\n<li>ファイル書き出しができる</li>\n</ul>\n</li>\n<li>\n<p><a href=\"http://github.com/thetalecrafter/img-loader\">img-loader</a></p>\n<ul>\n<li>minimize, optimizeなどの画像処理ができる</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://github.com/postcss/postcss-loader\">postcss-loader</a></p>\n<ul>\n<li>PostCSSをcssに変換</li>\n</ul>\n</li>\n</ul>\n<h4>output</h4>\n<p>指定したjsを書き出す。</p>\n<h4>postcss</h4>\n<p>PostCSSのプラグインを定義する。</p>\n<ul>\n<li><a href=\"https://github.com/MoOx/postcss-cssnext\">cssnext</a> 策定中のCSS記法が使える</li>\n<li><a href=\"https://github.com/postcss/postcss-mixins\">conditionals</a> @ifが使える</li>\n<li><a href=\"https://github.com/ben-eb/postcss-discard-comments\">discardCommentd</a> コメントを消せる</li>\n<li><a href=\"https://github.com/dan-gamble/postcss-font-awesome\">fontAwesome</a> fontAwesomeのunicodeに変換してくれる</li>\n<li><a href=\"https://github.com/postcss/postcss-import\">import</a> @importが使える</li>\n<li><a href=\"https://github.com/postcss/postcss-mixins\">mixins</a> @mixinsが使える</li>\n</ul>\n<h3>package.json</h3>\n<pre><code>{\n  \"name\": \"static-site\",\n  \"description\": \"Static site by webpack\",\n  \"version\": \"0.0.0\",\n  \"author\": \"ideyuta &#x3C;ide.yuta@gmail.com>\",\n  \"dependencies\": {\n    \"font-awesome\": \"^4.5.0\",\n    \"normalize.css\": \"^4.0.0\"\n  },\n  \"devDependencies\": {\n    \"babel-core\": \"^6.6.0\",\n    \"babel-loader\": \"^6.2.4\",\n    \"babel-preset-es2015\": \"^6.6.0\",\n    \"file-loader\": \"^0.8.5\",\n    \"glob\": \"^7.0.3\",\n    \"img-loader\": \"^1.2.2\",\n    \"postcss\": \"^5.0.19\",\n    \"postcss-conditionals\": \"^2.0.2\",\n    \"postcss-cssnext\": \"^2.5.1\",\n    \"postcss-discard-comments\": \"^2.0.4\",\n    \"postcss-font-awesome\": \"^0.2.1\",\n    \"postcss-import\": \"^8.0.2\",\n    \"postcss-loader\": \"^0.8.2\",\n    \"postcss-mixins\": \"^4.0.1\",\n    \"webpack\": \"^1.12.2\",\n    \"webpack-dev-server\": \"^1.12.1\"\n  },\n  \"license\": \"MIT\",\n  \"private\": true,\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"\"\n  },\n  \"scripts\": {\n    \"build\": \"webpack --display-error-details\",\n    \"start\": \"webpack-dev-server\"\n  }\n}\n</code></pre>","frontmatter":{"date":"2016-03-25 06:52:11 (金)","path":"/20160325/","title":"Babel, PostCSSで静的サイトを作るためのwebpackの基本構成"}},"posts":{"edges":[]}},"pageContext":{"isCreatedByStatefulCreatePages":false}}